<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on ego</title>
    <link>https://mm-k-takashima.github.io/study-group-text/categories/develop/</link>
    <description>Recent content in Develop on ego</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 19 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mm-k-takashima.github.io/study-group-text/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web開発技術のあたりまえ 1 - 「あたりまえ」って何だろう -</title>
      <link>https://mm-k-takashima.github.io/study-group-text/article/series-the-obvious-of-web-dev-01/</link>
      <pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mm-k-takashima.github.io/study-group-text/article/series-the-obvious-of-web-dev-01/</guid>
      
        <description>はじめに - あるいはここでの「あたりまえ」について - 常識とは、18歳までに身に付けた偏見のコレクションである。
— Albert Einstein1
仕事中に「こんなこと、分かっていて当たり前だろ？」「当然できますよね？」と誰かが言ったのを聞いたことがあるだろうか。
企業及び業務における、人間の能力に対する「あたりまえ」というのは、ある程度保証されていると考えられている。
企業面接や紹介会社などのクオリティゲートを通り採用された人間は、当然のように周囲から「あたりまえ」のことができるものとして期待されるし、企業固有の「あたりまえ」は入社初期に研修や集中的な学習プランによって叩き込まれ、そこから現場に投入されるものと考えられているからだ。しかし、実際には「あたりまえ」のことが出来ていないがゆえに、誰かに対する失望の籠った声が発せられることが少なくない。そして、「あたりまえ」を知らない人間は、業務参加の資格や機会を暗黙的に失っていき、こっそりと仕事ができない人のラベルを貼られることになる。
これは何が悪いのだろうか？必要なスキルセットを選定することができなかった人事部門？ずさんな研修を行った研修担当者？それとも、不良在庫のような人材を押し付けた紹介会社？あるいは「あたりまえ」を知る努力さえ放棄した仕事のできない人？2
……広い世の中を探せばそういった個人の能力不足や怠慢が原因のケースもあるだろうが、僕としては別要因をひとつ提示したい。
「誰かのあたりまえが、みんなのあたりまえじゃなかった」
ただこの一点である。
どういうことかを説明するために、まず「あたりまえのあたりまえ」について話しておきたい。業務における「あたりまえ」とは何なのだろうか？
各々自分の認識を持っているだろうが、このシリーズでは各自の認識を抑えて、以下の定義に従ってもらいたい。
「あたりまえ」とは、ある集団における特定業務遂行に必須となる最低限の知識の総称である。 「あたりまえ」の知識には、コミュニケーション上必要な語彙・プロセス理解・背景理解が含まれる。 そして、この定義として捉えた時に顕出する「あたりまえ」の原則を2つ紹介する。
「あたりまえ」は変わるものである。すべてがまるごと変わることもあれば、一部だけが変わることもある。 50年ほど前のエンジニアの業務の「あたりまえ」を考えてみよう。
複数の巨大な真空管で構成された電算機に計算をさせるために、命令をパンチカードに打ち込み、電算室を利用する許可を得て読み込ませ、プログラムの実行を行う。文字一つを出力するためにも、多大なコストがかかるというのがかつての「あたりまえ」だった。
今はどうだろう。個人がコンソールを起動させ、echo &amp;quot;hogehoge&amp;quot;と打ち込む、あるいはブラウザの開発者ツールを開き、JavaScriptコンソールでconsole.log(&amp;quot;hogehoge&amp;quot;);と打ち込むだけで済む。誰の許可も必要ないし、実行ごとに莫大なコンピューティングリソースを投入することもない。
「プログラムを出力するためのコストは多大であるため、簡単なプログラムであっても、実行のたびにいちいち大仰な承認プロセスを経ることで不要な実行を抑制する」という、情報社会のあたりまえが大きく変わったのだ。
上記が労働体系や前提知識が丸ごと変わる大きな「あたりまえ」の変化だとすると、小さな変化はどうだろうか。
ここでは例として、JavaScriptにおける Babel.js と呼ばれるライブラリを例に挙げる。
JavaScriptには ECMAScript と呼ばれる世界共通の言語仕様書のようなものがあり、その仕様に従って各種JavaScriptの実行エンジンが作られ、ブラウザや他の実行環境に組み込まれることになる。
2015年、このECMAScript、およびJavaScriptに転換期が訪れた。ECMAScript 2015 (ES2015, ES6とも呼ばれる)のリリースである。このエディションの ECMAScript は多くの新しい構文や機能が追加されるもので、Webシステムの生産性に大きく貢献すると期待された。
……が、そうそううまくいかないのが現実だ。 ECMAScript はあくまで仕様であり、その仕様に準拠するかどうかは実行エンジンやブラウザの開発団体に大きく委ねられていた。その結果どうなったかはInternet Explorerの悪名を調べてみればよくわかるだろう。
Babel はこの混沌としたJavaScriptの仕様実装状況に、 「トランスパイル」 という手法でアプローチしたライブラリである（また、トランスパイルを行うようなライブラリをまとめてトランスパイラと呼ぶ）。
これはあるプログラミング言語を別のプログラミング言語に書き直すという手法のことだ。
Babel の トランスパイル は、新しい仕様に準拠して書かれたJavaScriptのコードをまったく同じ動作をする古い構文に書き直す、というもので、クライアントサイドにブラウザ差異を吸収するようなライブラリ3を置くよりもずっとユーザー負担が少なく、しかも開発者にとってはよりわかりやすく使いやすい、新しい仕様に従って開発ができるというものだ。しかし一方で、これを実装に使うには、Webシステムの実装者にとって トランスパイル が「あたりまえ」のプロセスでないといけない。
時を経た2023年現在……トランスパイラは Babel 以外にも出現し、 ECMAScript の新旧変換だけでなく、他多くの変換処理を担うようになってきている。 トランスパイル を行うライブラリは労働体系や労働者のポジションを大きく変えるものではないが、しかし開発者が持つべき「あたりまえ」を確実に変えている。この特定領域の業務プロセスにおける変化が小さな「あたりまえ」の変化の例だ4。
「あたりまえ」は人と領域によって違う。 「あたりまえ」の定義に「ある集団」と書いてあることに気づいただろうか。
「特定業務遂行に必須となる最低限の知識」も重要だが、同様に重要なのがこの「ある集団」という記述だ。
この定義における「ある集団」とは、 特定の同一属性を持つ人間の集合のこと を指す。これを認識するために、一つの極端な例を出してみよう。
以下の文字列は、ある特定の集団にのみ理解できる文字列だ。
5LP -&amp;gt; 5LP -&amp;gt; 5LK -&amp;gt; (c) -&amp;gt; 236MK あるいはこの数値の並びもそうだ。</description>
      
    </item>
    
  </channel>
</rss>