<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>勉強会 on ego</title>
    <link>https://mm-k-takashima.github.io/study-group-text/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A/</link>
    <description>Recent content in 勉強会 on ego</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 19 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mm-k-takashima.github.io/study-group-text/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web開発技術のあたりまえ 1 - 「あたりまえ」って何だろう -</title>
      <link>https://mm-k-takashima.github.io/study-group-text/article/series-the-obvious-of-web-dev-01/</link>
      <pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mm-k-takashima.github.io/study-group-text/article/series-the-obvious-of-web-dev-01/</guid>
      
        <description>はじめに - あるいはここでの「あたりまえ」について - 常識とは、18歳までに身に付けた偏見のコレクションである。
— Albert Einstein1
仕事中に「こんなこと、分かっていて当たり前だろ？」「当然できますよね？」と誰かが言ったのを聞いたことがあるだろうか。
企業及び業務における、人間の能力に対する「あたりまえ」というのは、ある程度保証されていると考えられている。
企業面接や紹介会社などのクオリティゲートを通り採用された人間は、当然のように周囲から「あたりまえ」のことができるものとして期待されるし、企業固有の「あたりまえ」は入社初期に研修や集中的な学習プランによって叩き込まれ、そこから現場に投入されるものと考えられているからだ。しかし、実際には「あたりまえ」のことが出来ていないがゆえに、誰かに対する失望の籠った声が発せられることが少なくない。そして、「あたりまえ」を知らない人間は、業務参加の資格や機会を暗黙的に失っていき、こっそりと仕事ができない人のラベルを貼られることになる。
これは何が悪いのだろうか？必要なスキルセットを選定することができなかった人事部門？ずさんな研修を行った研修担当者？それとも、不良在庫のような人材を押し付けた紹介会社？あるいは「あたりまえ」を知る努力さえ放棄した仕事のできない人？2
……広い世の中を探せばそういった個人の能力不足や怠慢が原因のケースもあるだろうが、僕としては別要因をひとつ提示したい。
「誰かのあたりまえが、みんなのあたりまえじゃなかった」
ただこの一点である。
どういうことかを説明するために、まず「あたりまえのあたりまえ」について話しておきたい。業務における「あたりまえ」とは何なのだろうか？
各々自分の認識を持っているだろうが、このシリーズでは各自の認識を抑えて、以下の定義に従ってもらいたい。
「あたりまえ」とは、ある集団における特定業務遂行に必須となる最低限の知識の総称である。 「あたりまえ」の知識には、コミュニケーション上必要な語彙・プロセス理解・背景理解が含まれる。 そして、この定義として捉えた時に顕出する「あたりまえ」の原則を2つ紹介する。
「あたりまえ」は変わるものである。すべてがまるごと変わることもあれば、一部だけが変わることもある。 50年ほど前のエンジニアの業務の「あたりまえ」を考えてみよう。
複数の巨大な真空管で構成された電算機に計算をさせるために、命令をパンチカードに打ち込み、電算室を利用する許可を得て読み込ませ、プログラムの実行を行う。文字一つを出力するためにも、多大なコストがかかるというのがかつての「あたりまえ」だった。
今はどうだろう。個人がコンソールを起動させ、echo &amp;quot;hogehoge&amp;quot;と打ち込む、あるいはブラウザの開発者ツールを開き、JavaScriptコンソールでconsole.log(&amp;quot;hogehoge&amp;quot;);と打ち込むだけで済む。誰の許可も必要ないし、実行ごとに莫大なコンピューティングリソースを投入することもない。
「プログラムを出力するためのコストは多大であるため、簡単なプログラムであっても、実行のたびにいちいち大仰な承認プロセスを経ることで不要な実行を抑制する」という、情報社会のあたりまえが大きく変わったのだ。
上記が労働体系や前提知識が丸ごと変わる大きな「あたりまえ」の変化だとすると、小さな変化はどうだろうか。
ここでは例として、JavaScriptにおける Babel.js と呼ばれるライブラリを例に挙げる。
JavaScriptには ECMAScript と呼ばれる世界共通の言語仕様書のようなものがあり、その仕様に従って各種JavaScriptの実行エンジンが作られ、ブラウザや他の実行環境に組み込まれることになる。
2015年、このECMAScript、およびJavaScriptに転換期が訪れた。ECMAScript 2015 (ES2015, ES6とも呼ばれる)のリリースである。このエディションの ECMAScript は多くの新しい構文や機能が追加されるもので、Webシステムの生産性に大きく貢献すると期待された。
……が、そうそううまくいかないのが現実だ。 ECMAScript はあくまで仕様であり、その仕様に準拠するかどうかは実行エンジンやブラウザの開発団体に大きく委ねられていた。その結果どうなったかはInternet Explorerの悪名を調べてみればよくわかるだろう。
Babel はこの混沌としたJavaScriptの仕様実装状況に、 「トランスパイル」 という手法でアプローチしたライブラリである（また、トランスパイルを行うようなライブラリをまとめてトランスパイラと呼ぶ）。
これはあるプログラミング言語を別のプログラミング言語に書き直すという手法のことだ。
Babel の トランスパイル は、新しい仕様に準拠して書かれたJavaScriptのコードをまったく同じ動作をする古い構文に書き直す、というもので、クライアントサイドにブラウザ差異を吸収するようなライブラリ3を置くよりもずっとユーザー負担が少なく、しかも開発者にとってはよりわかりやすく使いやすい、新しい仕様に従って開発ができるというものだ。しかし一方で、これを実装に使うには、Webシステムの実装者にとって トランスパイル が「あたりまえ」のプロセスでないといけない。
時を経た2023年現在……トランスパイラは Babel 以外にも出現し、 ECMAScript の新旧変換だけでなく、他多くの変換処理を担うようになってきている。 トランスパイル を行うライブラリは労働体系や労働者のポジションを大きく変えるものではないが、しかし開発者が持つべき「あたりまえ」を確実に変えている。この特定領域の業務プロセスにおける変化が小さな「あたりまえ」の変化の例だ4。
「あたりまえ」は人と領域によって違う。 「あたりまえ」の定義に「ある集団」と書いてあることに気づいただろうか。
「特定業務遂行に必須となる最低限の知識」も重要だが、同様に重要なのがこの「ある集団」という記述だ。
この定義における「ある集団」とは、 特定の同一属性を持つ人間の集合のこと を指す。これを認識するために、一つの極端な例を出してみよう。
以下の文字列は、ある特定の集団にのみ理解できる文字列だ。
5LP -&amp;gt; 5LP -&amp;gt; 5LK -&amp;gt; (c) -&amp;gt; 236MK あるいはこの数値の並びもそうだ。</description>
      
    </item>
    
    <item>
      <title>Web開発技術のあたりまえ 2 - 「Web開発技術」って何だろう -</title>
      <link>https://mm-k-takashima.github.io/study-group-text/article/series-the-obvious-of-web-dev-02/</link>
      <pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mm-k-takashima.github.io/study-group-text/article/series-the-obvious-of-web-dev-02/</guid>
      
        <description>解像度を上げてみよう 語りえぬものについては、沈黙しなければならない。
— Ludwig Josef Johann Wittgenstein1
「はじめに」で述べた通り、「あたりまえ」とは特定の事象に対して複数の人間が持つマインドモデルが一致している状態のことを指す。
特定の事象に対して人間の内面が完全に一致するのは不可能だ。そこで、普通は規範となるべき質の高いモデルを選定し、その合意や理解、実践によって規範的モデルとしたり、その集団において適切な形になるようにモデルをカスタマイズしたりする。特にシステム開発においては、このような「あたりまえ」の作られ方が非常に多い。
ただ、ベースとなる規範的モデルを選ぼうにも、Web開発技術のモデルを選定しようとするとその時点で足が止まることも多々ある。
それも当然で、Web開発技術、もといシステム開発は多数の要素が絡み合い成立している複雑系であり、そもそも一見で理解することは難しいからだ。
さらに言えば、複雑系を説明するモデルも、人類の知識の一部である以上、ある別のモデルにおける語彙や知識を前提としていることが多い。その界隈で一般的に使われる語彙の意味解説が省略されていたり、その業界では当然であるべきものの説明が省かれていたりすることもしばしばある。
以上から、Web開発技術における規範的モデルを選出するためには、モデル同士に共通する要素を認識するだけでなく、モデルが成り立つために必要である、業界で一般的な基盤知識も必要になるだろう。
モデルはどのような事象をどのような観点から切り抜いて見たのか、モデルを取り巻く基盤の知識にはどのようなものがあるか……等々、Web開発技術のモデルを見る上で知るべきことはいろいろとあるが、まず初めにモデルにおいて必要な「何についてのモデルか」という部分、つまり「Web開発技術」という大枠とは何かから始めていこう。
Web開発技術とは何を指すのか Web開発技術は、システム開発においてもはや触れないで進めることが不可能となるほど巨大な技術体系だ。ほとんどのシステムは、なんらかの形でWeb開発技術を利用しているといっても過言ではない。
このWeb開発とは何なのか、ものすごく乱暴に言ってしまうと 「Webブラウザ上で動くアプリケーションを作る」 ことだ。
では、Web開発技術とは「Webブラウザ上で動くアプリケーションを作るための技術」のことかと言うと、実は少しだけニュアンスが違う。
Web開発技術は、主にWeb開発で使われる技術である のは間違いないが、その技術はWeb開発以外にも利用可能だ。 Technologies for Web Development ではなく、 Technologies commonly used in Web Development である、と英語で表現すると、なんとなく伝わるだろうか。
例を挙げると、JSONなんかが代表的だろう。これはブラウザ上で非同期通信と画面更新を行う技術……いわゆるAjaxの普及とともに広まったデータフォーマットで、JavaScriptのオブジェクトに由来する一定の形式をもった文字列を表す。
JSONはJavaScriptのみならず、プログラム言語で利用される構造化されたオブジェクトの形を模したものであり、読みやすく、メモリ上のデータに展開しやすいという特徴から、現代では様々なプログラム言語間でデータを共有するフォーマットとして利用されている。これは後述する Web標準(Web Standard) の一部であるが、用途はWeb開発に限らず、スタンドアローンで動くプログラムの設定記述フォーマットとしても使われることがある。
加えて、現代はSaaS2の普及により、Webでデータを相互利用するビジネスを実現したいという要求は多いし、今までdllなどのコンパイルされた形式で提供されてきたライブラリが提供元の都合ですべてWeb APIを経由した機能提供に変わったり、組み込み分野でもIoT3を求められるなんてこともあり得るだろう。
Web開発技術は、システム開発に関わる限り、もはや必須のものとなっている。
今まではブラウザを扱うアプリケーション開発におけるあたりまえであったものが、今やシステム開発に関わるもの全員のあたりまえとして扱われるべき、という世界になっているのだ。
図 2-1. スマートスピーカーの世界にブラウザは無いが、構成を見ると、インターネットの仕組みを利用したWebサーバーのようになっている。Internet Watch /『呼び掛けにどう応答しているのか？　Amazon EchoやGoogle Homeが動く仕組み』より画像引用。
「広さ」の深堀：Web開発技術についてのモデルの細かなカテゴライズ Web開発技術と一言で言っても、すべてを把握するのは大変だ。
Web開発技術という言葉で人が想像するものは多岐にわたるし、そもそも技術体系という広範なものを一見で理解することは難しい。
それでもなお人がモデルを作り出すとき、人は「焦点」と「分類」と呼ばれるものを使ってきた。語るべきものと語らないものについて分け、語るものについてはどのような立場から見て言ったものかを明らかにし、必要なもののみを抜き出す。そして、そうやって抜き出した必要なものを、ある一つの言葉でひとまとめにして、簡単に扱えるようにしていく。
この節では、「Web開発技術」という大きな体系に対し、概ね人はこうやって「Web開発技術」を分類し、切り取って扱っているであろうという話をする。
僕が開発者としてモデルを学んできた中で考えてきたことの一つに、「Web開発技術について人がモデルを示すとき、概ね全体のことではなく、あるカテゴリについて観点を置いている」というものがある。これはそういったモデルの焦点、および多くの人に共通するカテゴリの分け方の観測結果について示したものだ。
ざっくりと挙げても、Web開発技術において知るべきとされる要素のカテゴライズや、現実を切り取るときの切り口……つまり、僕のメタモデルの構成要素には以下のような知識群がある。
インターネットプロトコルとWeb標準 ユーザーエージェントについての知識 データ構造とアルゴリズム プログラミング プログラミングパラダイム システム開発のメソドロジー プラクティス ライブラリ ツール・ツールチェーン 主要なWebシステムのソフトウェアアーキテクチャパターン エコシステムとテクノロジースタック フレームワーク トレンド ……かなり盛りだくさんだ。だが、これらのカテゴリに含まれる詳細な要素はともかく、カテゴリ自体について避けて通ることはできない。</description>
      
    </item>
    
  </channel>
</rss>